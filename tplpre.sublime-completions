{
    "scope": "source.tplpre",

    "completions": [
        { "trigger": "_Copyright \t BMC Copyright", "contents": "// (c) Copyright 2016 BMC Software, Inc. All rights reserved." },
        { "trigger": "_tpl", "contents": "tpl \\$\\$TPLVERSION\\$\\$ module ${1:Module}.${2:Name};" },
        { "trigger": "_pattern", "contents": "\n\npattern ${1:PatternName} 1.0\n\n\t\"\"\"\n\tPattern trigger on ...\n\tPattern also tries to ...\n\n\tSupported platforms:\n\n\tUNIX\n\tWindows\n\n\t\"\"\"\n\n\tmetadata\n\t\tproducts := '';\n\t\turls := '';\n\t\tpublishers  := '';\n\t\tcategories := '';\n\t\tknown_versions := '', '', '';\n\tend metadata;\n\n\toverview\n\t\ttags TKU, TKU_YYYY_MM_DD, Name, Product;\n\tend overview;\n\n\tconstants\n\t\tsi_type := 'Product Name';\n\tend constants;\n\n\ttriggers\n\t\ton process := DiscoveredProcess where cmd matches unix_cmd \"CMD\" and args matches regex \"ARGS\";\n\tend triggers;\n\n\tbody\n\t\thost := model.host(process);\n\n\n\tend body;\nend pattern;\n\n" },
        { "trigger": "from \tSearchFunctions", "contents": "from SearchFunctions import SearchFunctions ${1:1}.${2:0}; // TODO: Check the current version" },
        { "trigger": "from \tRDBMSFunctions", "contents": "from RDBMSFunctions import RDBMSFunctions ${1:1}.${2:0}; // TODO: Check the current version" },
        { "trigger": "from \tDiscoveryFunctions", "contents": "from DiscoveryFunctions import DiscoveryFunctions ${1:1}.${2:0}; // TODO: Check the current version" },
        { "trigger": "from \tConversionFunctions", "contents": "from ConversionFunctions import ConversionFunctions ${1:1}.${2:0}; // TODO: Check the current version" },

        { "trigger": "_metadata \t pattern", "contents": "    metadata\n        products := \"\";\n        urls := \"\";\n        publishers  := \"\";\n        categories := \"\";\n        known_versions := \"\", \"\", \"\", \"\", \"\";\n    end metadata;\n" },
        { "trigger": "_metadata \t module", "contents": "metadata\n\torigin := \"TKU\";\n\ttkn_name := \"${1:name}\";\n\ttree_path := '${2:category}', '${3:category}', '${4:category}';\nend metadata;\n" },

        { "trigger": "_triggers \t unix_cmd", "contents": "triggers\n    on process := DiscoveredProcess where cmd matches unix_cmd \"${1:name}\";\nend triggers;\n" },
        { "trigger": "_triggers \t windows_cmd", "contents": "triggers\n    on process := DiscoveredProcess where cmd matches windows_cmd \"${1:name}\";\nend triggers;\n" },
        { "trigger": "_triggers \t host", "contents": "triggers\n    on Host created, confirmed where ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t hardware_detail", "contents": "triggers\n    on detail := HardwareDetail created, confirmed\n        where ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t management_controller", "contents": "triggers\n    on mc := ManagementController created, confirmed\n        where ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t network_device", "contents": "triggers\n    on device := NetworkDevice created, confirmed\n        where ${1:vendor};\nend triggers;\n" },
        { "trigger": "_triggers \t software_instance", "contents": "triggers\n    on SoftwareInstance created, confirmed\n                  where type = ${1:name};\nend triggers;\n" },
        { "trigger": "_triggers \t software_component", "contents": "triggers\n    on SoftwareComponent created, confirmed\n                   where instance = ${1:name};\nend triggers;\n" },

        { "trigger": "_identify \tSimple Identifiers", "contents": "identify ${1:SOME} 1.0\n\ttags simple_identity, ${2:tag1};\n\tDiscoveredProcess cmd -> simple_identity;\nend identify;\n" },

        { "trigger": "_table \t Two cols", "contents": "table ${1:table_name} 1.0\n\t\"one\" -> \"val_name1\", \"val_name2\";\n\t\"two\"    -> \"val_name3\", \"val_name4\";\n\tdefault  -> \"val_name5\", \"val_name6\";\nend table;\n" },
        { "trigger": "_table \t One col", "contents": "table ${1:table_name} 1.0\n\t\"one\"       -> val_1;\n\t\"two\"       -> val_2;\n\tdefault     -> val_100;\nend table;\n" },

        { "trigger": "_definitions \tSmall", "contents": "definitions ${1:def_name} 1.0\n\t'''${2:Describe definitions}'''$0\n\nend definitions;\n" },
        { "trigger": "_definitions \tBig", "contents": "definitions ${1:def_name} 1.0\n\t'''${2:Describe definitions}\n\t   Change History:\n\t   \n\t'''\n\t$0\n\nend definitions;\n" },
        { "trigger": "_define \t Function", "contents": "define ${1:function_name}(${2:argument}) -> ${3:return}\n\t'''\n\t${4:Describe function}\n\t'''\n\n\t$0\n\n\treturn ${5:dummy};\n\nend define;\n" },

        { "trigger": "_full_version \t(\\d*\\.\\d*)", "contents": "// Assign product version\nif full_version then\n\tproduct_version := regex.extract(full_version, regex '(\\d*\\.\\d*)', raw '\\1');\n\tif not product_version then\n\t\tproduct_version := full_version;\n\tend if;\nend if;\n\n" },
        { "trigger": "_packages \tFind packages", "contents": "packages := model.findPackages( host, [regex \"${1:PACKAGE_NAME}\"] );\nfor package in packages do\n\tif package.version then\n\t\tfull_version := package.version;\n\t\tbreak;\n\tend if;\nend for;" }
    ]
}
